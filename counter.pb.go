// Code generated by protoc-gen-go. DO NOT EDIT.
// source: counter.proto

package counter

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's name.
type CounterRequest struct {
	Count                int32    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CounterRequest) Reset()         { *m = CounterRequest{} }
func (m *CounterRequest) String() string { return proto.CompactTextString(m) }
func (*CounterRequest) ProtoMessage()    {}
func (*CounterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75dcd656fce7132f, []int{0}
}

func (m *CounterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CounterRequest.Unmarshal(m, b)
}
func (m *CounterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CounterRequest.Marshal(b, m, deterministic)
}
func (m *CounterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CounterRequest.Merge(m, src)
}
func (m *CounterRequest) XXX_Size() int {
	return xxx_messageInfo_CounterRequest.Size(m)
}
func (m *CounterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CounterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CounterRequest proto.InternalMessageInfo

func (m *CounterRequest) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// The response message containing the greetings
type CounterReply struct {
	Count                int32    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CounterReply) Reset()         { *m = CounterReply{} }
func (m *CounterReply) String() string { return proto.CompactTextString(m) }
func (*CounterReply) ProtoMessage()    {}
func (*CounterReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_75dcd656fce7132f, []int{1}
}

func (m *CounterReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CounterReply.Unmarshal(m, b)
}
func (m *CounterReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CounterReply.Marshal(b, m, deterministic)
}
func (m *CounterReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CounterReply.Merge(m, src)
}
func (m *CounterReply) XXX_Size() int {
	return xxx_messageInfo_CounterReply.Size(m)
}
func (m *CounterReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CounterReply.DiscardUnknown(m)
}

var xxx_messageInfo_CounterReply proto.InternalMessageInfo

func (m *CounterReply) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*CounterRequest)(nil), "counter.CounterRequest")
	proto.RegisterType((*CounterReply)(nil), "counter.CounterReply")
}

func init() { proto.RegisterFile("counter.proto", fileDescriptor_75dcd656fce7132f) }

var fileDescriptor_75dcd656fce7132f = []byte{
	// 126 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xce, 0x2f, 0xcd,
	0x2b, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0xd4, 0xb8,
	0xf8, 0x9c, 0x21, 0xcc, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x11, 0x2e, 0x56, 0xb0,
	0xa4, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0x84, 0xa3, 0xa4, 0xc2, 0xc5, 0x03, 0x57, 0x57,
	0x90, 0x53, 0x89, 0x5d, 0x95, 0x91, 0x27, 0x17, 0x07, 0x58, 0x55, 0x66, 0x5e, 0xba, 0x90, 0x2d,
	0x17, 0xa7, 0x67, 0x5e, 0x72, 0x51, 0x6a, 0x6e, 0x6a, 0x5e, 0x89, 0x90, 0xb8, 0x1e, 0xcc, 0x7e,
	0x54, 0xdb, 0xa4, 0x44, 0x31, 0x25, 0x0a, 0x72, 0x2a, 0x95, 0x18, 0x92, 0xd8, 0xc0, 0x0e, 0x35,
	0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x79, 0xf8, 0x39, 0x9b, 0xb9, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CountingClient is the client API for Counting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CountingClient interface {
	// Sends a greeting
	Increment(ctx context.Context, in *CounterRequest, opts ...grpc.CallOption) (*CounterReply, error)
}

type countingClient struct {
	cc *grpc.ClientConn
}

func NewCountingClient(cc *grpc.ClientConn) CountingClient {
	return &countingClient{cc}
}

func (c *countingClient) Increment(ctx context.Context, in *CounterRequest, opts ...grpc.CallOption) (*CounterReply, error) {
	out := new(CounterReply)
	err := c.cc.Invoke(ctx, "/counter.Counting/Increment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CountingServer is the server API for Counting service.
type CountingServer interface {
	// Sends a greeting
	Increment(context.Context, *CounterRequest) (*CounterReply, error)
}

// UnimplementedCountingServer can be embedded to have forward compatible implementations.
type UnimplementedCountingServer struct {
}

func (*UnimplementedCountingServer) Increment(ctx context.Context, req *CounterRequest) (*CounterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Increment not implemented")
}

func RegisterCountingServer(s *grpc.Server, srv CountingServer) {
	s.RegisterService(&_Counting_serviceDesc, srv)
}

func _Counting_Increment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountingServer).Increment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counter.Counting/Increment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountingServer).Increment(ctx, req.(*CounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Counting_serviceDesc = grpc.ServiceDesc{
	ServiceName: "counter.Counting",
	HandlerType: (*CountingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Increment",
			Handler:    _Counting_Increment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "counter.proto",
}
